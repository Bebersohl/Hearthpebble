/* eslint-env mocha*/

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const Card = new Schema({
  name: { type: String, required: true },
  text: String,
  flavor: String,
  howToEarn: String,
  howToEarnGolden: String,
  targetingArrowText: String,
  textInPlay: String,
  collectible: Boolean,
  cost: Number,
  attack: Number,
  health: Number,
  durability: Number,
  dust: [Number],
  entourage: [String],
  mechanics: [{ type: String,
    enum: [
      'ADJACENT_BUFF',
      'AURA',
      'BATTLECRY',
      'CHARGE',
      'COMBO',
      'DEATHRATTLE',
      'DIVINE_SHIELD',
      'ENRAGED',
      'FORGETFUL',
      'FREEZE',
      'INSPIRE',
      'MORPH',
      'OVERLOAD',
      'POISONOUS',
      'SECRET',
      'SILENCE',
      'STEALTH',
      'SPELLPOWER',
      'TAG_ONE_TURN_EFFECT',
      'TAUNT',
      'TREASURE',
      'WINDFURY',
      'ImmuneToSpellpower',
      'InvisibleDeathrattle'] }],
  playRequirements:
  {
    REQ_ENEMY_TARGET: Number,
    REQ_ENEMY_WEAPON_EQUIPPED: Number,
    REQ_LEGENDARY_TARGET: Number,
    REQ_ATTACKER_CAN_ATTACK: Number,
    REQ_CAN_BE_TARGETED_BY_OPPONENTS: Number,
    REQ_NONSTEALTH_ENEMY_TARGET: Number,
    REQ_MINION_TARGET: Number,
    REQ_TARGET_TAUNTER: Number,
    REQ_TARGET_WITH_DEATHRATTLE: Number,
    REQ_NOT_EXHAUSTED_ACTIVATE: Number,
    REQ_SECRET_CAP: Number,
    REQ_CAN_BE_TARGETED_BY_HERO_POWERS: Number,
    REQ_TARGET_FOR_NO_COMBO: Number,
    REQ_NONSELF_TARGET: Number,
    REQ_MUST_TARGET_TAUNTER: Number,
    REQ_MINION_CAP_IF_TARGET_AVAILABLE: Number,
    REQ_TARGET_WITH_RACE: Number,
    REQ_TARGET_MIN_ATTACK: Number,
    REQ_FRIENDLY_MINION_DIED_THIS_TURN: Number,
    REQ_FROZEN_TARGET: Number,
    REQ_NOT_MINION_JUST_PLAYED: Number,
    REQ_TARGET_IF_AVAILABLE_AND_MINIMUM_FRIENDLY_MINIONS: Number,
    REQ_ENCHANTED_TARGET: Number,
    REQ_TARGET_ATTACKED_THIS_TURN: Number,
    REQ_ENOUGH_MANA: Number,
    REQ_UNIQUE_SECRET: Number,
    REQ_YOUR_TURN: Number,
    REQ_ACTION_PWR_IS_MASTER_PWR: Number,
    REQ_WEAPON_EQUIPPED: Number,
    REQ_TARGET_WITH_BATTLECRY: Number,
    REQ_DRAG_TO_PLAY: Number,
    REQ_ATTACKER_NOT_FROZEN: Number,
    REQ_MINION_OR_ENEMY_HERO: Number,
    REQ_MINIMUM_TOTAL_MINIONS: Number,
    REQ_MINIMUM_ENEMY_MINIONS: Number,
    REQ_TARGET_IF_AVAILABLE_AND_DRAGON_IN_HAND: Number,
    REQ_STEADY_SHOT: Number,
    REQ_HERO_TARGET: Number,
    REQ_HERO_OR_MINION_TARGET: Number,
    REQ_ATTACK_GREATER_THAN_0: Number,
    REQ_CAN_BE_TARGETED_BY_BATTLECRIES: Number,
    REQ_TARGET_MAGNET: Number,
    REQ_CAN_BE_TARGETED_BY_SPELLS: Number,
    REQ_ENEMY_TARGET_NOT_IMMUNE: Number,
    REQ_CHARGE_TARGET: Number,
    REQ_MINION_CAP: Number,
    REQ_SUBCARD_IS_PLAYABLE: Number,
    REQ_TARGET_FOR_COMBO: Number,
    REQ_FRIENDLY_MINION_DIED_THIS_GAME: Number,
    REQ_UNDAMAGED_TARGET: Number,
    REQ_NOT_EXHAUSTED_HERO_POWER: Number,
    REQ_TARGET_IF_AVAILABLE: Number,
    REQ_CAN_BE_ATTACKED: Number,
    REQ_FRIENDLY_TARGET: Number,
    REQ_TARGET_TO_PLAY: Number,
    REQ_NUM_MINION_SLOTS: Number,
    REQ_ENTIRE_ENTOURAGE_NOT_IN_PLAY: Number,
    REQ_DAMAGED_TARGET: Number,
    REQ_TARGET_MAX_ATTACK: Number },
  rarity: { type: String,
    enum: [
      'LEGENDARY',
      'EPIC',
      'INVALID',
      'UNKNOWN_6',
      'RARE',
      'COMMON',
      'FREE'] },
  faction: { type: String,
    enum: [
      'HORDE',
      'INVALID',
      'NEUTRAL',
      'ALLIANCE'] },
  cardSet: { type: String,
    enum: [
      'CHEA',
      'NAXX',
      'LOE',
      'HERO_SKINS',
      'TEMP1',
      'TEST_TEMPORAR',
      'EXPERT',
      'BRM',
      'PE1',
      'CREDITS',
      'MISSION',
      'SLUSH',
      'DEM',
      'COR',
      'NON',
      'OG',
      'BLAN',
      'PE2',
      'INVALI',
      'PROMO',
      'GVG',
      'FP2',
      'TGT',
      'DEBUG_SP',
      'FP1',
      'OG_RESERVE',
      'REWAR',
      'TB'] },
  playerClass: { type: String,
    enum: [
      'DEATHKNIGHT',
      'INVALID',
      'PRIEST',
      'NEUTRAL',
      'WARLOCK',
      'ROGUE',
      'COUNT',
      'DRUID',
      'SHAMAN',
      'MAGE',
      'WARRIOR',
      'PALADIN',
      'HUNTER',
      'DREAM'] },
  type: { type: String,
    enum: [
      'STRING',
      'COUNTER',
      'ENTITY',
      'LOCSTRING',
      'UNKNOWN',
      'NUMBER',
      'TEAM',
      'BOOL',
      'PLAYER',
      'ENTITY_DEFINITION'] },
  race: { type: String,
    enum: [
      'TOTEM',
      'DEMON',
      'TROLL',
      'DRAGON',
      'BEAST',
      'WORGEN',
      'OR',
      'NIGHTEL',
      'SCOURGE',
      'PIRATE',
      'MECHANICAL',
      'GOBLIN2',
      'MURLOC',
      'INVALI',
      'HUMA',
      'OGRE',
      'GNOM',
      'ELEMENTAL',
      'GOBLI',
      'TAURE',
      'BLOODEL',
      'DRAENE',
      'NERUBIAN',
      'PET',
      'UNDEAD',
      'DWARF',
    ] },
});

module.exports = mongoose.model('Card', Card);
